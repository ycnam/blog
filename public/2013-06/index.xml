<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>2013-06s on ycnam</title>
    <link>https://ycnam.github.io/2013-06/</link>
    <description>Recent content in 2013-06s on ycnam</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-KR</language>
    <lastBuildDate>Thu, 13 Jun 2013 13:28:00 +0000</lastBuildDate>
    
	<atom:link href="https://ycnam.github.io/2013-06/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>오래된 제품을 리뉴얼하는 것은</title>
      <link>https://ycnam.github.io/2013-06/2013-06-13--/</link>
      <pubDate>Thu, 13 Jun 2013 13:28:00 +0000</pubDate>
      
      <guid>https://ycnam.github.io/2013-06/2013-06-13--/</guid>
      <description>진정 &#39;하위 호환성&#39;과의 싸움이구나.
이렇게 하나, 저렇게 하나 붙어서 &#39;거대해진&#39; 레거시들을 이렇게 대응, 저렇게 대응하다보면 복잡도는 높아지고 버그는 늘어가고 개발기간은 길어지고. 그만큼 새로운 것을 시도하는 것은 버거워지고.
이렇게 당하고 있자니 왜 Getting Real류의 제품개발론에서 &#39;기능 추가&#39;를 그토록 &#39;죄악시&#39;하는지 이해가 간다. 기능이 하나 추가될 때 마다, 정책이 하나 추가될 때 마다 유지비용은 배로 늘어나고, 결국 아무도 전체를 이해할 수 없을 만큼 복잡해진다.
그때가서는 아무리 &#39;속도가 생명!&#39;이라고 주장해도 소용이 없는 것이다.
하지만 이미 돌이킬 수 없는 상황일지라도 &#39;과거를 털어버리고 심플함을 되찾자!</description>
    </item>
    
  </channel>
</rss>